// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: competitor.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompetitorServiceClient is the client API for CompetitorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompetitorServiceClient interface {
	// Create
	Create(ctx context.Context, in *Competitor, opts ...grpc.CallOption) (*Competitor, error)
	// Update
	Update(ctx context.Context, in *Competitor, opts ...grpc.CallOption) (*CompetitorBoolResponse, error)
	// Delete
	Delete(ctx context.Context, in *CompetitorIdRequest, opts ...grpc.CallOption) (*CompetitorBoolResponse, error)
	// Get
	GetById(ctx context.Context, in *CompetitorIdRequest, opts ...grpc.CallOption) (*Competitor, error)
	GetListByMedia(ctx context.Context, in *CompetitorIdRequest, opts ...grpc.CallOption) (*CompetitorList, error)
	GetListByType(ctx context.Context, in *CompetitorIdRequest, opts ...grpc.CallOption) (*CompetitorList, error)
}

type competitorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompetitorServiceClient(cc grpc.ClientConnInterface) CompetitorServiceClient {
	return &competitorServiceClient{cc}
}

func (c *competitorServiceClient) Create(ctx context.Context, in *Competitor, opts ...grpc.CallOption) (*Competitor, error) {
	out := new(Competitor)
	err := c.cc.Invoke(ctx, "/competitor.CompetitorService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) Update(ctx context.Context, in *Competitor, opts ...grpc.CallOption) (*CompetitorBoolResponse, error) {
	out := new(CompetitorBoolResponse)
	err := c.cc.Invoke(ctx, "/competitor.CompetitorService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) Delete(ctx context.Context, in *CompetitorIdRequest, opts ...grpc.CallOption) (*CompetitorBoolResponse, error) {
	out := new(CompetitorBoolResponse)
	err := c.cc.Invoke(ctx, "/competitor.CompetitorService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) GetById(ctx context.Context, in *CompetitorIdRequest, opts ...grpc.CallOption) (*Competitor, error) {
	out := new(Competitor)
	err := c.cc.Invoke(ctx, "/competitor.CompetitorService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) GetListByMedia(ctx context.Context, in *CompetitorIdRequest, opts ...grpc.CallOption) (*CompetitorList, error) {
	out := new(CompetitorList)
	err := c.cc.Invoke(ctx, "/competitor.CompetitorService/GetListByMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *competitorServiceClient) GetListByType(ctx context.Context, in *CompetitorIdRequest, opts ...grpc.CallOption) (*CompetitorList, error) {
	out := new(CompetitorList)
	err := c.cc.Invoke(ctx, "/competitor.CompetitorService/GetListByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompetitorServiceServer is the server API for CompetitorService service.
// All implementations should embed UnimplementedCompetitorServiceServer
// for forward compatibility
type CompetitorServiceServer interface {
	// Create
	Create(context.Context, *Competitor) (*Competitor, error)
	// Update
	Update(context.Context, *Competitor) (*CompetitorBoolResponse, error)
	// Delete
	Delete(context.Context, *CompetitorIdRequest) (*CompetitorBoolResponse, error)
	// Get
	GetById(context.Context, *CompetitorIdRequest) (*Competitor, error)
	GetListByMedia(context.Context, *CompetitorIdRequest) (*CompetitorList, error)
	GetListByType(context.Context, *CompetitorIdRequest) (*CompetitorList, error)
}

// UnimplementedCompetitorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCompetitorServiceServer struct {
}

func (UnimplementedCompetitorServiceServer) Create(context.Context, *Competitor) (*Competitor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCompetitorServiceServer) Update(context.Context, *Competitor) (*CompetitorBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCompetitorServiceServer) Delete(context.Context, *CompetitorIdRequest) (*CompetitorBoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCompetitorServiceServer) GetById(context.Context, *CompetitorIdRequest) (*Competitor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCompetitorServiceServer) GetListByMedia(context.Context, *CompetitorIdRequest) (*CompetitorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByMedia not implemented")
}
func (UnimplementedCompetitorServiceServer) GetListByType(context.Context, *CompetitorIdRequest) (*CompetitorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByType not implemented")
}

// UnsafeCompetitorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompetitorServiceServer will
// result in compilation errors.
type UnsafeCompetitorServiceServer interface {
	mustEmbedUnimplementedCompetitorServiceServer()
}

func RegisterCompetitorServiceServer(s grpc.ServiceRegistrar, srv CompetitorServiceServer) {
	s.RegisterService(&CompetitorService_ServiceDesc, srv)
}

func _CompetitorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Competitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/competitor.CompetitorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).Create(ctx, req.(*Competitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Competitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/competitor.CompetitorService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).Update(ctx, req.(*Competitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/competitor.CompetitorService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).Delete(ctx, req.(*CompetitorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/competitor.CompetitorService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).GetById(ctx, req.(*CompetitorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_GetListByMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).GetListByMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/competitor.CompetitorService/GetListByMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).GetListByMedia(ctx, req.(*CompetitorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompetitorService_GetListByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompetitorServiceServer).GetListByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/competitor.CompetitorService/GetListByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompetitorServiceServer).GetListByType(ctx, req.(*CompetitorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompetitorService_ServiceDesc is the grpc.ServiceDesc for CompetitorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompetitorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "competitor.CompetitorService",
	HandlerType: (*CompetitorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CompetitorService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CompetitorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CompetitorService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CompetitorService_GetById_Handler,
		},
		{
			MethodName: "GetListByMedia",
			Handler:    _CompetitorService_GetListByMedia_Handler,
		},
		{
			MethodName: "GetListByType",
			Handler:    _CompetitorService_GetListByType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "competitor.proto",
}
